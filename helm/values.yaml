# Default values for links2go
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Image pull policy
imagePullPolicy: IfNotPresent

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true

# Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# Frontend configuration
frontend:
  enabled: true
  
  image:
    repository: links2go/frontend
    tag: "0.7.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    annotations: {}
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Backend configuration
backend:
  enabled: true
  
  image:
    repository: links2go/backend
    tag: "0.7.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
    annotations: {}
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - backend
          topologyKey: kubernetes.io/hostname
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Environment variables
  env:
    NODE_ENV: production
    PORT: "3001"
    
  # Configuration for rate limiting
  rateLimit:
    windowMs: 900000  # 15 minutes
    max: 100         # requests per window

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: links2go.example.com
      paths:
        - path: /api
          pathType: Prefix
          backend: backend
        - path: /
          pathType: Prefix
          backend: frontend
  
  tls:
    - secretName: links2go-tls
      hosts:
        - links2go.example.com

# Redis configuration (Bitnami Redis chart)
redis:
  enabled: true
  
  # Redis authentication
  auth:
    enabled: true
    password: "redis-password-change-me"
  
  # Master configuration
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m
    
    service:
      ports:
        redis: 6379
  
  # Replica configuration
  replica:
    replicaCount: 1
    persistence:
      enabled: false
    
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m
  
  # Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

# External Redis configuration (when redis.enabled = false)
externalRedis:
  host: "redis.example.com"
  port: 6379
  password: ""
  database: 0

# Monitoring configuration
monitoring:
  enabled: true
  
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
  
  prometheusRule:
    enabled: false
    namespace: ""
    rules: []

# Network Policy
networkPolicy:
  enabled: false
  
  ingress:
    - from: []
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 3001

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  frontend:
    minAvailable: 1
  backend:
    minAvailable: 2

# Additional labels for all resources
commonLabels: {}

# Additional annotations for all resources
commonAnnotations: {}